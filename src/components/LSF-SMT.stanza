#use-added-syntax(jitx)
defpackage connectors/components/LSF-SMT :
  import core
  import collections
  import jitx
  import jitx/commands

  import jsl/errors
  import jsl/ensure
  import jsl/landpatterns
  import jsl/symbols
  import jsl/design/settings

; Pulled from https://catalog.weidmueller.com/procat/Group.jsp;jsessionid=2D3E17129178EB5048158C0C39D6D6A1?groupId=(%22group21472460020482%22)&page=Group
; TU used when available, otherwise RL
val poles-to-mpn = to-hashtable<Int, String> $ [
    1 => "1446220000"
    2 => "1825640000"
    3 => "1825650000"
    4 => "1825660000"
    5 => "1825670000"
    6 => "1825680000"
    7 => "1825690000"
    8 => "1825700000"
    9 => "1825710000"
    10 => "1825720000"
    11 => "1825730000"
    12 => "1825740000"
    13 => "1870350000"
    14 => "1870360000"
    15 => "1870370000"
    16 => "1870510000"
    17 => "1870520000"
    18 => "1870540000"
    19 => "1870560000"
    20 => "1870570000"
    21 => "1870600000"
    22 => "1870610000"
    23 => "1870620000"
    24 => "1870630000"
  ]

public pcb-component component (-- num-poles: Int) :
  val poles = keys(poles-to-mpn)
  if not contains?(poles, num-poles):
    throw $ ValueError("Terminal block with pole count '%_' not supported - must be within [1, %_]" % [num-poles, length(poles-to-mpn)])

  name = to-string("Terminal Block %_ Poles" % [num-poles])
  description = to-string("TERM BLK %_P TOP ENTRY 3.5MM PCB" % [num-poles])
  manufacturer = "Weidm√ºller"
  mpn = to-string(poles-to-mpn[num-poles])
  datasheet = "https://catalog.weidmueller.com/procat/Group.jsp;jsessionid=2D3E17129178EB5048158C0C39D6D6A1?groupId=(%22group21472460020482%22)&page=Group"
  reference-prefix = "J"

  pin-properties :
    [pin:Ref | pads:Ref ... | side:Dir]
    for i in 1 through num-poles do :
      [p[i] | p[2 * i - 1], p[2 * i] | Left]


  ; Note: since headers are column-oriented, this is a bit hacky to get row-major
  ; ordering for the terminal blocks.
  ; The datasheet doesn't specify an order to the pads, and different sites
  ; order the pads differently.
  ; val pkg = Header(
  ;   num-leads = num-poles * 2,
  ;   lead-type = TH-Lead(length = typ(3.5), width = typ(1.1)),
  ;   pad-diam = 1.6,
  ;   rows = num-poles,
  ;   lead-numbering = Column-Major-Numbering(num-poles * 2, num-poles)
  ;   pitch = 3.50
  ;   package-body = LSF-SMT-package-body(num-poles)
  ; )
  val pkg = LFS-SMT-pkg(num-poles = num-poles)
  val lp = create-landpattern(pkg)
  assign-landpattern(lp)

  val box = BoxSymbol(self)
  assign-symbol $ create-symbol(box)


defn LSF-SMT-package-body (num-poles:Int) :
  val num-poles-dbl = to-double(num-poles)
  PackageBody(
    length = ((num-poles-dbl - 1.0) * 3.5 + num-poles-dbl * 1.2) +/- 0.1
    width = 7.8 +/- 0.0
    height = 14.0 +/- 0.0
  )

val LFS-SMT-Pitch = 3.5

public defstruct LFS-SMT-pkg <: Package :
  num-poles : Int with:
    ensure => ensure-positive!
  num-leads : Int with:
    as-method => true
  package-body:PackageBody with:
    as-method => true
  pad-planner:PadPlanner with:
    as-method => true
  lead-numbering:Numbering with:
    as-method => true
  density-level:DensityLevel with:
    as-method => true
    default => DENSITY-LEVEL
with:
  printer => true
  constructor => #LFS-SMT-pkg



public defn LFS-SMT-pkg (
  --
  num-poles:Int,
  pad-planner:PadPlanner = PthPadPlanner()
  lead-numbering:Numbering = Row-Major-Numbering(num-poles * 2, num-poles)
  density-level:DensityLevel = DENSITY-LEVEL
  ) -> LFS-SMT-pkg:

  val cnt = to-double(num-poles)
  val pkg-body = PackageBody(
    length = (((cnt - 1.0) * LFS-SMT-Pitch) + 4.2) +/- 0.1
    width = 8.5 +/- 0.0
    height = 14.0 +/- 0.0
  )
  #LFS-SMT-pkg(num-poles, num-poles * 2, pkg-body, pad-planner, lead-numbering, density-level)

public defmethod name (pkg:LFS-SMT-pkg) -> String :
  to-string("Terminal Block - %_ poles " % [num-poles(pkg)])

public defmethod courtyard-excess (
  pkg:LFS-SMT-pkg
) -> Double :
  0.25

public defmethod build-pads (
  pkg:LFS-SMT-pkg,
  vp:VirtualLP
  ):
  val poles = num-poles(pkg)
  val pad-seq = pad-grid-th(
    lead-type = TH-Lead(length = typ(3.5), width = typ(1.1)),
    planner = Pin1-PthPadPlanner(rect-shaper),
    lead-grid = GridPlanner(
      pitch = Dims(5.5, LFS-SMT-Pitch)
      columns = 2
      rows = poles
      anchor = C
    ),
    num-scheme = Row-Major-Numbering(poles * 2, poles)
  )

  append-all(vp, pad-seq)

public defmethod build-silkscreen (
  pkg:LFS-SMT-pkg,
  vp:VirtualLP
  ):
  create-silkscreen-outline(vp, package-body(pkg), density-level = density-level(pkg))
  build-outline-pin-1-triangle(vp)

