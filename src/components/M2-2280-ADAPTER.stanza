#use-added-syntax(jitx)
defpackage connectors/components/M2-2280-ADAPTER :
  import core
  import jitx
  import jitx/commands
  import jsl


val default-board-shape = PolygonWithArcs([
  Point(-9.750, 0.0)
  Arc(-9.750, 0.200, 0.200, 270.000, -90.000)
  Point(-9.950, 0.200)
  Point(-9.950, 3.500)
  Arc(-10.450, 3.500, 0.500, 0.0, 90.000)
  Point(-10.800, 4.000)
  Arc(-10.800, 4.200, 0.200, 270.000, -90.000)
  Point(-11.000, 4.200)
  Point(-11.000, 79.500)
  Arc(-10.500, 79.500, 0.500, 180.000, -90.000)
  Point(-10.500, 80.000)
  Point(10.500, 80.000)
  Arc(10.500, 79.500, 0.500, 90.000, -90.000)
  Point(11.000, 79.500)
  Point(11.000, 4.200)
  Arc(10.800, 4.200, 0.200, 0.0, -90.000)
  Point(10.800, 4.000)
  Point(10.450, 4.000)
  Arc(10.450, 3.500, 0.500, 90.000, 90.000)
  Point(9.950, 3.500)
  Point(9.950, 0.200)
  Arc(9.750, 0.200, 0.200, 0.0, -90.000)
  Point(9.750, 0.0)
  Point(-9.750, 0.0)
])

; this edge connector needs a specific board outline which matches the M.2 standard
; the geometry will be different for different types of M.2 connectors
; for instance, the type-B connector has a different outline than the type-M connector
; so we will list the two most common board shapes here
; that geometry looks like the following:
val board-shape-B = PolygonWithArcs([
  Point(-9.750, 0.0)
  Arc(-9.750, 0.200, 0.200, 270.000, -90.000)
  Point(-9.950, 0.200)
  Point(-9.950, 3.500)
  Arc(-10.450, 3.500, 0.500, 0.0, 90.000)
  Point(-10.800, 4.000)
  Arc(-10.800, 4.200, 0.200, 270.000, -90.000)
  Point(-11.000, 4.200)
  Point(-11.000, 79.500)
  Arc(-10.500, 79.500, 0.500, 180.000, -90.000)
  Point(-10.500, 80.000)
  Point(10.500, 80.000)
  Arc(10.500, 79.500, 0.500, 90.000, -90.000)
  Point(11.000, 79.500)
  Point(11.000, 4.200)
  Arc(10.800, 4.200, 0.200, 0.0, -90.000)
  Point(10.800, 4.000)
  Point(10.450, 4.000)
  Arc(10.450, 3.500, 0.500, 90.000, 90.000)
  Point(9.950, 3.500)
  Point(9.950, 0.200)
  Arc(9.750, 0.200, 0.200, 0.0, -90.000)
  Point(9.750, 0.0)
  Point(6.200, 0.0)
  Point(6.200, 2.900)
  Arc(5.600, 2.900, 0.600, 0.0, 90.000)
  Arc(5.600, 2.900, 0.600, 90.0, 90.000)
  Point(5.000, 2.900)
  Point(5.000, 0.0)
  Point(-9.750, 0.0)
])

val board-shape-M = PolygonWithArcs([
  Point(-9.750, 0.0)
  Arc(-9.750, 0.200, 0.200, 270.000, -90.000)
  Point(-9.950, 0.200)
  Point(-9.950, 3.500)
  Arc(-10.450, 3.500, 0.500, 0.0, 90.000)
  Point(-10.800, 4.000)
  Arc(-10.800, 4.200, 0.200, 270.000, -90.000)
  Point(-11.000, 4.200)
  Point(-11.000, 79.500)
  Arc(-10.500, 79.500, 0.500, 180.000, -90.000)
  Point(-10.500, 80.000)
  Point(10.500, 80.000)
  Arc(10.500, 79.500, 0.500, 90.000, -90.000)
  Point(11.000, 79.500)
  Point(11.000, 4.200)
  Arc(10.800, 4.200, 0.200, 0.0, -90.000)
  Point(10.800, 4.000)
  Point(10.450, 4.000)
  Arc(10.450, 3.500, 0.500, 90.000, 90.000)
  Point(9.950, 3.500)
  Point(9.950, 0.200)
  Arc(9.750, 0.200, 0.200, 0.0, -90.000)
  Point(9.750, 0.0)
  Point(-5.525, 0.0)
  Point(-5.525, 2.900)
  Arc(-6.125, 2.900, 0.600, 0.0, 90.000)
  Arc(-6.125, 2.900, 0.600, 90.0, 90.000)
  Point(-6.725, 2.900)
  Point(-6.725, 0.0)
  Point(-9.750, 0.0)
])

val board-shape-B-M = PolygonWithArcs([
  Point(-9.750, 0.0)
  Arc(-9.750, 0.200, 0.200, 270.000, -90.000)
  Point(-9.950, 0.200)
  Point(-9.950, 3.500)
  Arc(-10.450, 3.500, 0.500, 0.0, 90.000)
  Point(-10.800, 4.000)
  Arc(-10.800, 4.200, 0.200, 270.000, -90.000)
  Point(-11.000, 4.200)
  Point(-11.000, 79.500)
  Arc(-10.500, 79.500, 0.500, 180.000, -90.000)
  Point(-10.500, 80.000)
  Point(10.500, 80.000)
  Arc(10.500, 79.500, 0.500, 90.000, -90.000)
  Point(11.000, 79.500)
  Point(11.000, 4.200)
  Arc(10.800, 4.200, 0.200, 0.0, -90.000)
  Point(10.800, 4.000)
  Point(10.450, 4.000)
  Arc(10.450, 3.500, 0.500, 90.000, 90.000)
  Point(9.950, 3.500)
  Point(9.950, 0.200)
  Arc(9.750, 0.200, 0.200, 0.0, -90.000)
  Point(9.750, 0.0)
  Point(6.200, 0.0)
  Point(6.200, 2.900)
  Arc(5.600, 2.900, 0.600, 0.0, 90.000)
  Arc(5.600, 2.900, 0.600, 90.0, 90.000)
  Point(5.000, 2.900)
  Point(5.000, 0.0)
  Point(-5.525, 0.0)
  Point(-5.525, 2.900)
  Arc(-6.125, 2.900, 0.600, 0.0, 90.000)
  Arc(-6.125, 2.900, 0.600, 90.0, 90.000)
  Point(-6.725, 2.900)
  Point(-6.725, 0.0)
  Point(-9.750, 0.0)
])

public pcb-enum connectors/components/M2-2280-ADAPTER/M2-KeyType :
  M2-A-TYPE
  M2-B-TYPE
  M2-E-TYPE
  M2-M-TYPE

pcb-pad circle-th-pad :
  type = TH
  shape = Circle(2.750)
  ; jsl/landpatterns/pads/make-soldermask(0.1016)
  layer(SolderMask(Top)) = Circle(2.750)
  layer(SolderMask(Bottom)) = Circle(2.750)
  layer(Cutout()) = Circle(1.750)

; pins to skip when creating the land pattern for the M.2 edge connector
; these missing pins are determined by the M.2 connector type
val skip-A = ( 8 through 15)
val skip-B = (12 through 19)
val skip-E = (24 through 31)
val skip-M = (59 through 66)

defn skip-pin? (i : Int, key-type : Tuple<M2-KeyType|False>) -> True|False :
  var skip = false
  for type in key-type do :
    val do-skip =
      switch(type):
        M2-A-TYPE : contains?(skip-A, i)
        M2-B-TYPE : contains?(skip-B, i)
        M2-E-TYPE : contains?(skip-E, i)
        M2-M-TYPE : contains?(skip-M, i)
    if do-skip :
      skip = true
  skip

defn even? (i : Int) -> True|False :
  i % 2 == 0

defn isIn? (item : M2-KeyType, key-type : Tuple<M2-KeyType|False>) :
  var isin = false
  for type in key-type do :
    if item == type :
      isin = true
  isin

public pcb-landpattern M2-2280-ADAPTER (key-type : Tuple<M2-KeyType|False>) :
;   pad MOUNTING-HOLE : circle-th-pad at loc(0.0, 80.000) on Top
  val start-x-top = 9.250
  val pitch-x = 0.250
  val y-val = 1.250
  for i in 1 through 75 do :
    if not skip-pin?(i, key-type) :
      val x-val = start-x-top - to-double(i - 1) * pitch-x
      if even?(i) :
        pad P[i] : smd-pad(0.350, 2.500) at loc(x-val, y-val) on Bottom
      else :
        pad P[i] : smd-pad(0.350, 2.500) at loc(x-val, y-val) on Top

  layer(Silkscreen("F-SilkS", Top)) = Text(">REF", 1.27, C, loc(0.0, 0.0), "", TrueTypeFont, true, false)
  layer(Silkscreen("F-SilkS", Top)) = Text(">VALUE", 1.27, C, loc(0.0, 0.0), "", TrueTypeFont, true, false)
  layer(CustomLayer("boardEdge", Top)) = Line(0.050, [Point(-9.750, 0.0), Point(9.750, 0.0)])

   layer(CustomLayer("boardOutline", Top)) =
      if isIn?(M2-B-TYPE, key-type) and not isIn?(M2-M-TYPE, key-type) :
        board-shape-B
      else if isIn?( M2-M-TYPE, key-type) and not isIn?(M2-B-TYPE, key-type) :
        board-shape-M
      else if isIn?(M2-B-TYPE, key-type) and isIn?(M2-M-TYPE, key-type) :
        board-shape-B-M
      else :
        default-board-shape


public pcb-component component (key-type : Tuple<M2-KeyType|False>) :
  description = "PCIe M.2 2280 Adapter"
  mpn = "M2-2280-ADAPTER"
  datasheet = "http://read.pudn.com/downloads794/doc/project/3133918/PCIe_M.2_Electromechanical_Spec_Rev1.0_Final_11012013_RS_Clean.pdf"
  reference-prefix = "J"

  pin-properties :
    [pin:Ref | pads:Ref ... | side:Dir]
    ; [MP1 | MOUNTING-HOLE | Down]
    for i in 1 through 75 do :
      if not skip-pin?(i, key-type) :
        [p[i] | P[i] | if even?(i) : Right else: Left]

  assign-landpattern(M2-2280-ADAPTER(key-type))
  val box = BoxSymbol(self)
  assign-symbol $ create-symbol(box)


; view(component([]))
; view(component([M2-B-TYPE]))
; view(component([M2-M-TYPE]))
; view(component([M2-B-TYPE, M2-M-TYPE]))

public pcb-module module (key-type : Tuple<M2-KeyType|False>) :

  port vdd3v3 : power

  public inst edge-conn : component(key-type)

  net VDD3V3 (vdd3v3.V+ edge-conn.p[2] edge-conn.p[4] edge-conn.p[70] edge-conn.p[72] edge-conn.p[74])
  net GND (vdd3v3.V- edge-conn.p[3] edge-conn.p[27] edge-conn.p[33] edge-conn.p[39] edge-conn.p[45] edge-conn.p[51] edge-conn.p[57] edge-conn.p[71] edge-conn.p[73])

  if isIn?(M2-B-TYPE, key-type) and not isIn?(M2-M-TYPE, key-type) :
    ; PCIe x2/SATA   ; /USB 2.0/USB 3.0/HSIC/SSIC/Audio/UIM/I2C
    supports pcie(2) :
      pcie(2).control.PEWAKE#   => edge-conn.p[54]
      pcie(2).control.CLKREQ#   => edge-conn.p[52]
      pcie(2).control.PERST#    => edge-conn.p[50]
      pcie(2).data.refclk.P     => edge-conn.p[55]
      pcie(2).data.refclk.N     => edge-conn.p[53]
      pcie(2).data.lane[0].RX.P => edge-conn.p[49]
      pcie(2).data.lane[0].RX.N => edge-conn.p[47]
      pcie(2).data.lane[0].TX.P => edge-conn.p[43]
      pcie(2).data.lane[0].TX.N => edge-conn.p[41]
      pcie(2).data.lane[1].RX.P => edge-conn.p[37]
      pcie(2).data.lane[1].RX.N => edge-conn.p[35]
      pcie(2).data.lane[1].TX.P => edge-conn.p[31]
      pcie(2).data.lane[1].TX.N => edge-conn.p[29]
    supports SATA :
      option :
        SATA.lane.RX.P => edge-conn.p[49]
        SATA.lane.RX.N => edge-conn.p[47]
        SATA.lane.TX.P => edge-conn.p[43]
        SATA.lane.TX.N => edge-conn.p[41]
      option :
        SATA.lane.RX.P => edge-conn.p[43]
        SATA.lane.RX.N => edge-conn.p[41]
        SATA.lane.TX.P => edge-conn.p[49]
        SATA.lane.TX.N => edge-conn.p[47]
  else if isIn?( M2-M-TYPE, key-type) :
    ; PCIe x4 / SATA
    supports pcie(4) :
      pcie(4).control.PEWAKE#   => edge-conn.p[54]
      pcie(4).control.CLKREQ#   => edge-conn.p[52]
      pcie(4).control.PERST#    => edge-conn.p[50]
      pcie(4).data.refclk.P     => edge-conn.p[55]
      pcie(4).data.refclk.N     => edge-conn.p[53]
      pcie(4).data.lane[0].RX.P => edge-conn.p[49]
      pcie(4).data.lane[0].RX.N => edge-conn.p[47]
      pcie(4).data.lane[0].TX.P => edge-conn.p[43]
      pcie(4).data.lane[0].TX.N => edge-conn.p[41]
      pcie(4).data.lane[1].RX.P => edge-conn.p[37]
      pcie(4).data.lane[1].RX.N => edge-conn.p[35]
      pcie(4).data.lane[1].TX.P => edge-conn.p[31]
      pcie(4).data.lane[1].TX.N => edge-conn.p[29]
      pcie(4).data.lane[2].RX.P => edge-conn.p[25]
      pcie(4).data.lane[2].RX.N => edge-conn.p[23]
      pcie(4).data.lane[2].TX.P => edge-conn.p[19]
      pcie(4).data.lane[2].TX.N => edge-conn.p[17]
      pcie(4).data.lane[3].RX.P => edge-conn.p[13]
      pcie(4).data.lane[3].RX.N => edge-conn.p[11]
      pcie(4).data.lane[3].TX.P => edge-conn.p[7]
      pcie(4).data.lane[3].TX.N => edge-conn.p[5]
    supports SATA :
      option :
        SATA.lane.RX.P => edge-conn.p[49]
        SATA.lane.RX.N => edge-conn.p[47]
        SATA.lane.TX.P => edge-conn.p[43]
        SATA.lane.TX.N => edge-conn.p[41]
      option :
        SATA.lane.RX.P => edge-conn.p[43]
        SATA.lane.RX.N => edge-conn.p[41]
        SATA.lane.TX.P => edge-conn.p[49]
        SATA.lane.TX.N => edge-conn.p[47]
