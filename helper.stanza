#use-added-syntax(jitx)
defpackage helper :
  import core
  import jitx
  import jitx/commands


doc: \<DOC>
@brief Simple board rules
This structure sets the simple design rules to be applied to a design. Note
that routing-structures will supersede these values when applied to traces.
See https://docs.jitx.com/reference/statements/rulestmt/heading.html
<DOC>

public pcb-rules example-board-rules :
  min-copper-width             = 0.075
  min-copper-copper-space      = 0.075
  min-copper-hole-space        = 0.075
  min-copper-edge-space        = 0.254
  min-annular-ring             = 0.050
  min-drill-diameter           = 0.100
  min-silkscreen-width         = 0.100
  min-pitch-leaded             = 0.350
  min-pitch-bga                = 0.350
  max-board-width              = 406.4
  max-board-height             = 558.8
  min-silk-solder-mask-space   = 0.050
  min-silkscreen-text-height   = 0.380
  solder-mask-registration     = 0.050
  min-th-pad-expand-outer      = 0.050
  min-soldermask-opening       = 0.152
  min-soldermask-bridge        = 0.102
  min-hole-to-hole             = 0.100
  min-pth-pin-solder-clearance = 0.500

;==== Materials ================================================================
pcb-material copper :
  type = Conductor
  name = "Copper"

pcb-material core :
  type = Dielectric
  dielectric-coefficient = 3.6
  name = "FR4 Core"

pcb-material soldermask :
  type = Dielectric
  dielectric-coefficient = 3.7
  name = "Taiyo BSN4000"

pcb-material prepreg :
  type = Dielectric
  dielectric-coefficient = 3.5
  name = "FR4 Prepreg"


public pcb-stackup example-stackup :
  name = "Example 6-layer 0.032in"
  stack(0.013, soldermask)
  stack(0.030, copper    )
  stack(0.060, prepreg   )
  stack(0.025, copper    )
  stack(0.060, prepreg   )
  stack(0.015, copper    )
  stack(0.070, core      )
  stack(0.025, copper    )
  stack(0.060, prepreg   )
  stack(0.025, copper    )
  stack(0.060, prepreg   )
  stack(0.030, copper    )
  stack(0.013, soldermask)

doc: \<DOC>
@brief Parametric via generator for laser-drilled vias
This function creates vias based on the input arguments
@param via-start the layer that the via starts on
@param via-stop the layer that the via ends on
For other via types and arguments, please
consult: https://docs.jitx.com/reference/statements/viastmt/heading.html
<DOC>

public pcb-via gen-via (via-start:LayerIndex via-stop:LayerIndex via-name:String) :
  name = via-name
  start = via-start
  stop = via-stop
  diameter = 0.250
  hole-diameter = 0.150
  type = MechanicalDrill

public val default-TH = gen-via(LayerIndex(0,Top), LayerIndex(0,Bottom) "th") ; Signal
doc: \<DOC>
@brief Simple board definition function
This function call defines a board by creating a board with shape, stackup and allowable vias.
@param outline the shape of the board
<DOC>
public pcb-board an-example-board (outline:Shape) :
  stackup = example-stackup
  boundary = outline
  signal-boundary = outline
  vias = [default-TH]

doc: \<DOC>
@brief Simple board setup function
This function call sets up a board for a design by creating a board with a shape, stackup and design rules.
<DOC>

; Setup the board
public defn setup-board (board-shape:Shape) :
  set-board(an-example-board(board-shape))
  set-rules(example-board-rules)
